"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Matrix = void 0;
class Matrix {
    constructor(client_id, access_token, { base_url, user_agent }) {
        this.client_id = client_id;
        this.access_token = access_token;
        this.base_url = `https://matrix.sbapis.com/b/`;
        this.user_agent = 'Social Blade TypeScript Library :: SocialBlade/socialblade-js';
        if (base_url)
            this.base_url = base_url;
        if (user_agent)
            this.user_agent = user_agent;
    }
    request(method, { path, data, headers }) {
        return __awaiter(this, void 0, void 0, function* () {
            const qs = `?${Object.keys(data)
                .map((key) => key + '=' + data[key])
                .join('&')}`;
            return yield fetch(`${this.base_url}${path}${method === 'GET' ? qs : ''}`, {
                method,
                body: method !== 'GET' ? data : null,
                headers: this.client_id === 'socialblade'
                    ? undefined
                    : Object.assign(Object.assign({}, headers), { clientid: this.client_id, token: this.access_token, 'User-Agent': this.user_agent }),
            }).then((data) => data.json());
        });
    }
    get(path, data = {}, headers = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request('GET', { path, data, headers });
        });
    }
}
exports.Matrix = Matrix;
//# sourceMappingURL=matrix.js.map